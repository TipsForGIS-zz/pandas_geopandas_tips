# create dataframes
pd.read_csv('table.csv', head=0) -> returns a pandas dataframe from a csv file with the first row as a the column header
pd.read_csv('table.csv', nrows=50) -> returns a pandas dataframe from the first 50 rows of a csv file
pd.read_csv('table.csv', dtypes={'c1':int,'c7':float}) -> returns a pandas dataframe with new datatypes for the columns in the dictoinary
pd.DataFrame.from_dict(dict_obj, orient='columns') -> returns a dataframe from a dictionary object where keys are columns and valus are row values
pd.DataFrame.from_dict(dict_obj, orient='index') 
pd.columns = [...] -> returns a dataframe from a dictionary object where keys are indeces and valus are the remaining row values, then assign column names to the dataframe


# export dataframe
pd.to_csv('table.csv', index=False) -> exports the dataframe into a csv file without the index column: 0,1,2...

# reading from the dataframe plus statistics
df.head() -> returns the first 5 rows of a dataframe
df.tail() -> returns the last 5 rows of a dataframe
df.describe() -> returns a statistical summary table for all the columns in the dataframe: mean, min, max, std etc..
df.describe().min() -> returns the min values for the columns in the dataframe
df.column_name.mean() -> returns the mean of the specified column
df.info(memory_usage='deep') -> returns the memory usage for the dataframe
df.memory_usage(deep=True) -> returns the memory usage for each column in the dataframe

# iterating the dataframes and the series
for c in df.column_name: print(c) -> iterates a pandas series, a dataframe column
for index, row in df.iterrows(): print(index, row.col1, row.col2) -> iterates a pandas dataframe by index and row

# reading properties of dataframes
df.shape -> returns the dimensions of the dataframe rows_num, cols_num
df.dtype -> returns the columns data types
df.columns -> returns the columns names

# manipulating column
df.rename(columns={'old name': 'new_name',...}, inplace = True) -> renames column(s) name(s) in a dataframe
df.columns = df.columns.str.replace(' ', '_') -> replaces space characters in column names with underscores
df.drop('column_name', axis=1, inplace=True) -> drops a column from the dataframe obj

# sorting rows
df.sort_values('column_name') -> returns a sorted dataframe object by a column name
df.column_name.sort_values('column_name', ascending=False) -> returns a decending sorted dataframe object by a column name

# filtering the data
df[df.column_name == 'xyz'] -> returns rows based on the condition (returning a series of booleans of True values)
df[df.column_name.isin(['val1','val2','val3'])] -> returns rows where column name value is one of the values in the list
df.dropna(how='any', inplace=True) -> drops permenantly all rows that has any null values in any column
df.dropna(how='all', inplace=True) -> drops permenantly all rows that has null values in all column

# change column 'series' data type
df.column_name.astype('int') -> returns a pandas series with a new type of integer
df.column_name.astype('string') -> returns a pandas series with a new type of string
df.str_col.astype('int').mean() -> returns the mean of the specified string type column after casting it to integer

# group by
df.groupby('col3').col2.mean() -> groups by col3 and generates the mean value of col2 based on that

# series
pd.Series([1,2,3]) -> returns a pandas series based on the passed list
df.column_name.value_counts() -> returns the count of each value in a column
df.column_name.unique() -> returns the distinct values in a column
df[df.col.isnull()] -> returns the rows where the value of the column is null or no value, notnull() is also available

# indeces
pd.set_index('column_name',inplace=True) -> changes the index to the specified column

# create new columns
df['new_col'] = df['col1'] * df['col7'] * 2 -> creates a new column with a value created from one line of code
df['new_col'] = df.apply(lambda row: function_name(row['col1'], row['col7']), axis=1) -> creates a new column with a value created from a function

# loc method
df.loc[0:50, ['col1','col7']] -> returns a new dataframe with the first 50 rows and the specificed columns
df.loc[0:50,:] -> returns a new dataframe with the first 50 rows and all columns
df.loc[df.col1=='something', ['col1','col7']] -> 

